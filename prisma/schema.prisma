// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 유저 모델
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?   // 자기소개

  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  tasteNotes    TasteNote[]
  comments      Comment[]
  likes         Like[]
  reports       Report[]
  favorites     Favorite[]
  recipeLikes   RecipeLike[]
  beans         Bean[]
}

// NextAuth 계정 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth 세션 모델
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 브루잉 레시피 모델
model Recipe {
  id              String    @id @default(cuid())
  title           String    // 레시피 이름
  description     String?   // 레시피 설명
  isPublic        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String    // 작성자 ID
  
  // 브루잉 관련 필드
  brewingMethod   String    // 추출 방식 (핸드드립, 에어로프레스, 프렌치프레스 등)
  difficulty      String?   // 난이도 (초급, 중급, 상급)
  preparationTime String?   // 준비 시간 (예: "3~4분", "12시간" 등)
  beanAmount      String?   // 원두량 (예: "15g")
  waterAmount     String?   // 물 용량 (예: "250ml")
  waterTemp       String?   // 물 온도 (예: "90-92°C")
  grindSize        String?   // 분쇄도 (예: "중간", "고운" 등)
  tools           String?   // 필요한 도구 (쉼표로 구분)
  
  // 맛 프로필 관련 필드
  acidity         String?   // 산미 (예: "중간-높음")
  sweetness       String?   // 단맛 (예: "중간")
  body            String?   // 바디감 (예: "가벼움-중간")
  recommendedBeans String?  // 추천 원두 (예: "에티오피아, 케냐 등 산미가 강한 싱글 오리진")
  
  // 원두 관계 필드 추가
  beanId         String?
  bean           Bean?   @relation(fields: [beanId], references: [id], onDelete: SetNull)
  
  // 관계
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients     Ingredient[]
  steps           Step[]
  brewingTips     BrewingTip[]
  tasteNotes      TasteNote[]
  comments        Comment[]
  likes           Like[]
  favorites       Favorite[]
  recipeLikes     RecipeLike[]
}

// 재료 모델
model Ingredient {
  id          String   @id @default(cuid())
  recipeId    String
  name        String   // 재료 이름
  amount      String?  // 양
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

// 레시피 단계 모델
model Step {
  id          String   @id @default(cuid())
  recipeId    String
  order       Int      // 순서
  description String   // 단계 설명
  time        String?  // 시간 (예: "30초", "1분" 등)
  waterAmount String?  // 물의 양 (예: "50ml")
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

// 브루잉 팁 모델
model BrewingTip {
  id          String   @id @default(cuid())
  recipeId    String
  content     String   // 팁 내용
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

// 원두 모델
model Bean {
  id          String    @id @default(cuid())
  name        String    // 원두 이름
  origin      String?   // 원산지
  region      String?   // 지역
  farm        String?   // 농장명
  altitude    String?   // 고도
  process     String?   // 프로세스 (워시드, 내추럴 등)
  variety     String?   // 품종 (게이샤, 부르봉, 카투라 등)
  roastLevel  String?   // 로스팅 단계
  roaster     String?   // 로스터리
  roastDate   DateTime? // 로스팅 날짜
  description String?   // 설명
  isPublic    Boolean   @default(true) // 공개 여부
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String    // 작성자 ID
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 관계
  tasteNotes  TasteNote[]
  recipes     Recipe[]  // 이 원두를 사용한 레시피
}

// 맛 노트 모델
model TasteNote {
  id                String   @id @default(cuid())
  userId            String
  recipeId          String?  // 특정 레시피에 대한 맛 노트인 경우
  
  // 기본 정보
  date              DateTime @default(now())
  coffeeName        String   // 원두 이름
  origin            String?  // 원산지
  roastLevel        String?  // 로스팅 단계
  roaster           String?  // 로스터리
  
  // 추출 정보
  brewingMethod     String   // 추출 방식
  grindSize         String?  // 분쇄도
  beanAmount        String?  // 원두량
  waterAmount       String?  // 물 용량
  waterTemp         String?  // 물 온도
  brewTime          String?  // 추출 시간
  ratio             String?  // 비율
  
  // 맛 평가
  overallRating     Int?     // 종합 평가 (1-5)
  acidity           Int?     // 산미 (1-10)
  sweetness         Int?     // 단맛 (1-10)
  body              Int?     // 바디감 (1-10)
  bitterness        Int?     // 쓴맛 (1-10)
  flavorNotes       String?  // 맛 노트 (쉼표로 구분)
  notes             String?  // 추가 노트
  
  // 맛 노트 시각화 (SCA Flavor Wheel 기반)
  flavorLabels      String?  // 분류 레이블 (쉼표로 구분, 예: "과일,견과류,초콜릿")
  flavorColors      String?  // 각 맛 노트에 해당하는 색상 (쉼표로 구분, 예: "#FF5733,#3D9970,#8B4513")
  primaryColor      String?  // 주요 맛 색상 (예: "#FF5733")
  
  // 원두 관계 필드 추가
  beanId           String?
  bean             Bean?   @relation(fields: [beanId], references: [id], onDelete: SetNull)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe            Recipe?  @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  labels            TasteNoteLabel[]  // 맛 노트 레이블 관계
}

// 맛 노트 레이블 모델
model TasteNoteLabel {
  id          String    @id @default(cuid())
  name        String    // 레이블 이름 (예: "과일", "견과류", "초콜릿")
  color       String    // 레이블 색상 (예: "#FF5733")
  description String?   // 레이블 설명
  createdAt   DateTime  @default(now())
  
  tasteNotes  TasteNote[]  // 맛 노트와의 관계
  
  @@unique([name])
}

// 댓글 모델
model Comment {
  id        String   @id @default(cuid())
  content   String
  recipeId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports   Report[]
}

// 좋아요 모델
model Like {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  createdAt DateTime @default(now())

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
}

// 즐겨찾기 모델
model Favorite {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  createdAt DateTime @default(now())

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
}

// 신고 모델
model Report {
  id        String   @id @default(cuid())
  reason    String
  commentId String
  userId    String
  createdAt DateTime @default(now())
  
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RecipeLike {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@id([userId, recipeId])
} 